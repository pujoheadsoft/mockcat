[1mdiff --git a/mockcat.cabal b/mockcat.cabal[m
[1mindex 1be46ea..bf48b50 100644[m
[1m--- a/mockcat.cabal[m
[1m+++ b/mockcat.cabal[m
[36m@@ -53,6 +53,7 @@[m [mlibrary[m
   ghc-options: -Wall -Wcompat -Widentities -Wincomplete-record-updates -Wincomplete-uni-patterns -Wmissing-export-lists -Wmissing-home-modules -Wpartial-fields -Wredundant-constraints -fprint-potential-instances[m
   build-depends:[m
       base >=4.7 && <5[m
[32m+[m[32m    , containers[m
     , template-haskell >=2.18 && <2.23[m
     , text >=2.0 && <2.2[m
   default-language: Haskell2010[m
[36m@@ -71,6 +72,7 @@[m [mtest-suite mockcat-test[m
   ghc-options: -Wall -Wcompat -Widentities -Wincomplete-record-updates -Wincomplete-uni-patterns -Wmissing-export-lists -Wmissing-home-modules -Wpartial-fields -Wredundant-constraints -fprint-potential-instances -threaded -rtsopts -with-rtsopts=-N[m
   build-depends:[m
       base >=4.7 && <5[m
[32m+[m[32m    , containers[m
     , hspec[m
     , mockcat[m
     , template-haskell >=2.18 && <2.23[m
[1mdiff --git a/package.yaml b/package.yaml[m
[1mindex d4a8bd3..abe9d0a 100644[m
[1m--- a/package.yaml[m
[1m+++ b/package.yaml[m
[36m@@ -32,6 +32,7 @@[m [mdescription: |[m
 [m
 dependencies:[m
 - base >= 4.7 && < 5[m
[32m+[m[32m- containers[m
 - text >= 2.0 && < 2.2[m
 - template-haskell >= 2.18 && < 2.23[m
 [m
[1mdiff --git a/src/Test/MockCat/Mock.hs b/src/Test/MockCat/Mock.hs[m
[1mindex 9b984a9..2131934 100644[m
[1m--- a/src/Test/MockCat/Mock.hs[m
[1m+++ b/src/Test/MockCat/Mock.hs[m
[36m@@ -42,6 +42,7 @@[m [mimport Data.IORef (IORef, modifyIORef', newIORef, readIORef)[m
 import Data.List (elemIndex, find, intercalate)[m
 import Data.Maybe[m
 import Data.Text (pack, replace, unpack)[m
[32m+[m[32mimport Data.Map (Map)[m
 import GHC.IO (unsafePerformIO)[m
 import Test.MockCat.Cons[m
 import Test.MockCat.Param[m
[36m@@ -51,7 +52,7 @@[m [mdata Mock fun params = Mock (Maybe MockName) fun (Verifier params)[m
 [m
 type MockName = String[m
 [m
[31m-newtype Verifier params = Verifier (IORef (AppliedParamsList params))[m
[32m+[m[32mnewtype Verifier params = Verifier (IORef (AppliedRecord params))[m
 [m
 {- | Create a mock.[m
 From this mock, you can generate stub functions and verify the functions.[m
[36m@@ -121,6 +122,7 @@[m [mcreateStubFn ::[m
   m fun[m
 createStubFn params = stubFn <$> createMock params[m
 [m
[32m+[m
 -- | Create a named stub function.[m
 createNamedStubFun ::[m
   MockBuilder params fun verifyParams =>[m
[36m@@ -144,7 +146,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d :> Param e :> Param f :> Param g :> Param h :> Param i)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock[m
       name[m
       s[m
[36m@@ -160,7 +162,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d :> Param e :> Param f :> Param g :> Param h)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock[m
       name[m
       s[m
[36m@@ -176,7 +178,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d :> Param e :> Param f :> Param g)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock[m
       name[m
       s[m
[36m@@ -192,7 +194,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d :> Param e :> Param f)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 c2 d2 e2 f2 -> unsafePerformIO $ extractReturnValueWithValidate name params (p a2 :> p b2 :> p c2 :> p d2 :> p e2 :> p f2) s)[m
 [m
 instance[m
[36m@@ -203,7 +205,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d :> Param e)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 c2 d2 e2 -> unsafePerformIO $ extractReturnValueWithValidate name params (p a2 :> p b2 :> p c2 :> p d2 :> p e2) s)[m
 [m
 instance[m
[36m@@ -214,7 +216,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 c2 d2 -> unsafePerformIO $ extractReturnValueWithValidate name params (p a2 :> p b2 :> p c2 :> p d2) s)[m
 [m
 instance[m
[36m@@ -222,7 +224,7 @@[m [minstance[m
   MockBuilder (Param a :> Param b :> Param c :> Param r) (a -> b -> c -> r) (Param a :> Param b :> Param c)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 c2 -> unsafePerformIO $ extractReturnValueWithValidate name params (p a2 :> p b2 :> p c2) s)[m
 [m
 instance[m
[36m@@ -230,7 +232,7 @@[m [minstance[m
   MockBuilder (Param a :> Param b :> Param r) (a -> b -> r) (Param a :> Param b)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 -> unsafePerformIO $ extractReturnValueWithValidate name params (p a2 :> p b2) s)[m
 [m
 instance[m
[36m@@ -238,7 +240,7 @@[m [minstance[m
   MockBuilder (Param a :> Param r) (a -> r) (Param a)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 -> unsafePerformIO $ extractReturnValueWithValidate name params (p a2) s)[m
 [m
 instance[m
[36m@@ -249,7 +251,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d :> Param e :> Param f :> Param g :> Param h :> Param i)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 c2 d2 e2 f2 g2 h2 i2 -> unsafePerformIO $ findReturnValueWithStore name params (p a2 :> p b2 :> p c2 :> p d2 :> p e2 :> p f2 :> p g2 :> p h2 :> p i2) s)[m
 [m
 instance[m
[36m@@ -260,7 +262,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d :> Param e :> Param f :> Param g :> Param h)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 c2 d2 e2 f2 g2 h2 -> unsafePerformIO $ findReturnValueWithStore name params (p a2 :> p b2 :> p c2 :> p d2 :> p e2 :> p f2 :> p g2 :> p h2) s)[m
 [m
 instance[m
[36m@@ -271,7 +273,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d :> Param e :> Param f :> Param g)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 c2 d2 e2 f2 g2 -> unsafePerformIO $ findReturnValueWithStore name params (p a2 :> p b2 :> p c2 :> p d2 :> p e2 :> p f2 :> p g2) s)[m
 [m
 instance[m
[36m@@ -282,7 +284,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d :> Param e :> Param f)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 c2 d2 e2 f2 -> unsafePerformIO $ findReturnValueWithStore name params (p a2 :> p b2 :> p c2 :> p d2 :> p e2 :> p f2) s)[m
 [m
 instance[m
[36m@@ -293,7 +295,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d :> Param e)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 c2 d2 e2 -> unsafePerformIO $ findReturnValueWithStore name params (p a2 :> p b2 :> p c2 :> p d2 :> p e2) s)[m
 [m
 instance[m
[36m@@ -304,7 +306,7 @@[m [minstance[m
     (Param a :> Param b :> Param c :> Param d)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 c2 d2 -> unsafePerformIO $ findReturnValueWithStore name params (p a2 :> p b2 :> p c2 :> p d2) s)[m
 [m
 instance[m
[36m@@ -315,7 +317,7 @@[m [minstance[m
     (Param a :> Param b :> Param c)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 c2 -> unsafePerformIO $ findReturnValueWithStore name params (p a2 :> p b2 :> p c2) s)[m
 [m
 instance[m
[36m@@ -323,7 +325,7 @@[m [minstance[m
   MockBuilder [Param a :> Param b :> Param r] (a -> b -> r) (Param a :> Param b)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 b2 -> unsafePerformIO $ findReturnValueWithStore name params (p a2 :> p b2) s)[m
 [m
 instance[m
[36m@@ -331,7 +333,7 @@[m [minstance[m
   MockBuilder [Param a :> Param r] (a -> r) (Param a)[m
   where[m
   build name params = do[m
[31m-    s <- liftIO $ newIORef ([] :: AppliedParamsList params)[m
[32m+[m[32m    s <- liftIO $ newIORef appliedRecord[m
     makeMock name s (\a2 -> unsafePerformIO $ findReturnValueWithStore name params (p a2) s)[m
 [m
 -- ------[m
[36m@@ -339,10 +341,19 @@[m [minstance[m
 p :: a -> Param a[m
 p = param[m
 [m
[31m-makeMock :: MonadIO m => Maybe MockName -> IORef (AppliedParamsList params) -> fun -> m (Mock fun params)[m
[32m+[m[32mmakeMock :: MonadIO m => Maybe MockName -> IORef (AppliedRecord params) -> fun -> m (Mock fun params)[m
 makeMock name l fn = pure $ Mock name fn (Verifier l)[m
 [m
[31m-type AppliedParamsList params = [params][m
[32m+[m[32mappliedRecord :: AppliedRecord params[m
[32m+[m[32mappliedRecord = AppliedRecord {[m
[32m+[m[32m  appliedParams = mempty,[m
[32m+[m[32m  appliedCount = mempty[m
[32m+[m[32m}[m
[32m+[m
[32m+[m[32mdata AppliedRecord params = AppliedRecord {[m
[32m+[m[32m  appliedParams :: [params],[m
[32m+[m[32m  appliedCount :: Map params Int[m
[32m+[m[32m}[m
 [m
 extractReturnValueWithValidate ::[m
   ParamDivider params args (Param r) =>[m
[36m@@ -351,23 +362,30 @@[m [mextractReturnValueWithValidate ::[m
   Maybe MockName ->[m
   params ->[m
   args ->[m
[31m-  IORef (AppliedParamsList args) ->[m
[32m+[m[32m  IORef (AppliedRecord args) ->[m
   IO r[m
 extractReturnValueWithValidate name params inputParams s = do[m
   validateWithStoreParams name s (args params) inputParams[m
   pure $ returnValue params[m
 [m
[32m+[m[32mxxxxx :: IORef (AppliedRecord params) -> params -> IO ()[m
[32m+[m[32mxxxxx ref inputParams = do[m
[32m+[m[32m  modifyIORef' ref (\AppliedRecord {appliedParams, appliedCount} -> AppliedRecord {[m
[32m+[m[32m    appliedParams = appliedParams ++ [inputParams],[m
[32m+[m[32m    appliedCount = appliedCount[m
[32m+[m[32m  })[m
[32m+[m
 findReturnValueWithStore ::[m
   Eq args =>[m
   Show args =>[m
   ParamDivider params args (Param r) =>[m
   Maybe MockName ->[m
[31m-  AppliedParamsList params ->[m
[32m+[m[32m  params ->[m
   args ->[m
[31m-  IORef (AppliedParamsList args) ->[m
[32m+[m[32m  IORef (AppliedRecord args) ->[m
   IO r[m
 findReturnValueWithStore name paramsList inputParams ref = do[m
[31m-  modifyIORef' ref (++ [inputParams])[m
[32m+[m[32m  xxxxx ref inputParams[m
   let expectedArgs = args <$> paramsList[m
       r = findReturnValue paramsList inputParams[m
   maybe[m
[36m@@ -378,17 +396,17 @@[m [mfindReturnValueWithStore name paramsList inputParams ref = do[m
 findReturnValue ::[m
   Eq args =>[m
   ParamDivider params args (Param r) =>[m
[31m-  AppliedParamsList params ->[m
[32m+[m[32m  AppliedRecord params ->[m
   args ->[m
   Maybe r[m
 findReturnValue paramsList inputParams = do[m
   find (\params -> args params == inputParams) paramsList[m
     >>= \params -> pure $ returnValue params[m
 [m
[31m-validateWithStoreParams :: (Eq a, Show a) => Maybe MockName -> IORef (AppliedParamsList a) -> a -> a -> IO ()[m
[32m+[m[32mvalidateWithStoreParams :: (Eq a, Show a) => Maybe MockName -> IORef (AppliedRecord a) -> a -> a -> IO ()[m
 validateWithStoreParams name ref expected actual = do[m
   validateParams name expected actual[m
[31m-  modifyIORef' ref (++ [actual])[m
[32m+[m[32m  xxxxx ref actual[m
 [m
 validateParams :: (Eq a, Show a) => Maybe MockName -> a -> a -> IO ()[m
 validateParams name expected actual =[m
[36m@@ -446,7 +464,7 @@[m [mnewtype VerifyFailed = VerifyFailed Message[m
 [m
 type Message = String[m
 [m
[31m-doVerify :: (Eq a, Show a) => Maybe MockName -> AppliedParamsList a -> VerifyMatchType a -> Maybe VerifyFailed[m
[32m+[m[32mdoVerify :: (Eq a, Show a) => Maybe MockName -> AppliedRecord a -> VerifyMatchType a -> Maybe VerifyFailed[m
 doVerify name list (MatchAny a) = do[m
   guard $ notElem a list[m
   pure $ verifyFailedMesssage name list a[m
[36m@@ -454,7 +472,7 @@[m [mdoVerify name list (MatchAll a) = do[m
   guard $ Prelude.any (a /=) list[m
   pure $ verifyFailedMesssage name list a[m
 [m
[31m-verifyFailedMesssage :: Show a => Maybe MockName -> AppliedParamsList a -> a -> VerifyFailed[m
[32m+[m[32mverifyFailedMesssage :: Show a => Maybe MockName -> AppliedRecord a -> a -> VerifyFailed[m
 verifyFailedMesssage name calledParams expected =[m
   VerifyFailed $[m
     intercalate[m
[36m@@ -464,7 +482,7 @@[m [mverifyFailedMesssage name calledParams expected =[m
         "   but got: " <> formatCalledParamsList calledParams[m
       ][m
 [m
[31m-formatCalledParamsList :: Show a => AppliedParamsList a -> String[m
[32m+[m[32mformatCalledParamsList :: Show a => AppliedRecord a -> String[m
 formatCalledParamsList calledParams[m
   | length calledParams == 0 = "Never been called."[m
   | length calledParams == 1 = init . drop 1 . show $ calledParams[m
[36m@@ -592,7 +610,7 @@[m [mdoVerifyOrder ::[m
   Show a => [m
   VerifyOrderMethod -> [m
   Maybe MockName -> [m
[31m-  AppliedParamsList a -> [m
[32m+[m[32m  AppliedRecord a ->[m[41m [m
   [a] -> [m
   Maybe VerifyFailed[m
 doVerifyOrder ExactlySequence name calledValues expectedValues[m
[36m@@ -609,7 +627,7 @@[m [mdoVerifyOrder PartiallySequence name calledValues expectedValues[m
       guard $ isOrderNotMatched calledValues expectedValues[m
       pure $ verifyFailedPartiallySequence name calledValues expectedValues[m
 [m
[31m-verifyFailedPartiallySequence :: Show a => Maybe MockName -> AppliedParamsList a -> [a] -> VerifyFailed[m
[32m+[m[32mverifyFailedPartiallySequence :: Show a => Maybe MockName -> AppliedRecord a -> [a] -> VerifyFailed[m
 verifyFailedPartiallySequence name calledValues expectedValues =[m
   VerifyFailed $[m
     intercalate[m
[36m@@ -621,7 +639,7 @@[m [mverifyFailedPartiallySequence name calledValues expectedValues =[m
         intercalate "\n" $ ("    " <>) . show <$> calledValues[m
       ][m
 [m
[31m-isOrderNotMatched :: Eq a => AppliedParamsList a -> [a] -> Bool[m
[32m+[m[32misOrderNotMatched :: Eq a => AppliedRecord a -> [a] -> Bool[m
 isOrderNotMatched calledValues expectedValues =[m
   isNothing $[m
     foldl[m
[36m@@ -633,7 +651,7 @@[m [misOrderNotMatched calledValues expectedValues =[m
       (Just calledValues)[m
       expectedValues[m
 [m
[31m-verifyFailedOrderParamCountMismatch :: Maybe MockName -> AppliedParamsList a -> [a] -> VerifyFailed[m
[32m+[m[32mverifyFailedOrderParamCountMismatch :: Maybe MockName -> AppliedRecord a -> [a] -> VerifyFailed[m
 verifyFailedOrderParamCountMismatch name calledValues expectedValues =[m
   VerifyFailed $[m
     intercalate[m
[36m@@ -672,7 +690,7 @@[m [mdata VerifyOrderResult a = VerifyOrderResult[m
     expectedValue :: a[m
   }[m
 [m
[31m-collectUnExpectedOrder :: Eq a => AppliedParamsList a -> [a] -> [VerifyOrderResult a][m
[32m+[m[32mcollectUnExpectedOrder :: Eq a => AppliedRecord a -> [a] -> [VerifyOrderResult a][m
 collectUnExpectedOrder calledValues expectedValues =[m
   catMaybes $[m
     mapWithIndex[m
[1mdiff --git a/test/Test/MockCat/ExampleSpec.hs b/test/Test/MockCat/ExampleSpec.hs[m
[1mindex 25842ea..d008295 100644[m
[1m--- a/test/Test/MockCat/ExampleSpec.hs[m
[1m+++ b/test/Test/MockCat/ExampleSpec.hs[m
[36m@@ -1,6 +1,7 @@[m
 {-# LANGUAGE BlockArguments #-}[m
 {-# LANGUAGE TemplateHaskell #-}[m
 {-# LANGUAGE TypeApplications #-}[m
[32m+[m[32m{-# LANGUAGE LambdaCase #-}[m
 [m
 module Test.MockCat.ExampleSpec (spec) where[m
 [m
[36m@@ -85,4 +86,12 @@[m [mspec = do[m
           "b" |> "return y"[m
         ][m
     f "a" `shouldBe` "return x"[m
[31m-    f "b" `shouldBe` "return y"[m
\ No newline at end of file[m
[32m+[m[32m    f "b" `shouldBe` "return y"[m
[32m+[m[41m  [m
[32m+[m[32m  it "multi2" do[m
[32m+[m[32m    f <- createStubFn [[m
[32m+[m[32m        "a" |> "return x",[m
[32m+[m[32m        "a" |> "return y"[m
[32m+[m[32m      ][m
[32m+[m[32m    f "a" `shouldBe` "return x"[m
[32m+[m[32m    f "a" `shouldBe` "return y"[m
